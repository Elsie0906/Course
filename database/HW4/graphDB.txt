Q1: Create an empty graph for traversal, and add to it, vertices and edges

Ans:
graph = TinkerGraph.open();					<-- (1)
g = graph.traversal();						<-- (2)
v1 = g.addV("course").property(id, 1).property("name", "cs101").next();		<-- (3)
v2 = g.addV("course").property(id, 2).property("name", "cs201").next();
g.addE("pre-req").from(v2).to(v1).property(id, 9);							<-- (4)
v3 = g.addV("course").property(id, 3).property("name", "cs220").next();
g.addE("pre-req").from(v3).to(v2).property(id, 10);
v4 = g.addV("course").property(id, 4).property("name", "cs334").next();
g.addE("pre-req").from(v4).to(v2).property(id, 11);
v5 = g.addV("course").property(id, 5).property("name", "cs420").next();
g.addE("pre-req").from(v5).to(v3).property(id, 12);
g.addE("co-req").from(v5).to(v3).property(id, 13);
v6 = g.addV("course").property(id, 6).property("name", "cs681").next();
g.addE("pre-req").from(v6).to(v4).property(id, 14);
v7 = g.addV("course").property(id, 7).property("name", "cs400").next();
g.addE("pre-req").from(v7).to(v4).property(id, 15);
v8 = g.addV("course").property(id, 8).property("name", "cs526").next();
g.addE("pre-req").from(v8).to(v7).property(id, 16);
g.addE("co-req").from(v8).to(v7).property(id, 17);

Explaination:
/* TinkerGraph is an API provided by TinkerPop to create graph */
(1) open(): Open a new TinkerGraph instance named 'graph'. In the beginning the graph structure has 0 edges and 0 vertices
(2) traversal(): Generate  TraversalSource g; ask Gremlin to traverse the Graph
(3) addV(): a vertex is created and add it to the graph
(4) addE(): add edge to the graph

Q2: Write a query that will output JUST the doubly-connected nodes

Ans:
g.V().as('a').out('co-req').as('b').select('a','b').by('name')

Explaination:
(1) V() list all vertices in the graph
(2) as(): provide a label to the step that can later be accessed
(3) out(): equals to 'outE().inV()'; move to the adjacent vertex through an outgoing edge
(4) select(), by(): Select labeled steps in a traversal

Q3: Write a query that will output all the ancestors (for us, these would be prereqs) of a given vertex. Eg. running it on CS526 

Ans:
g.V().has('name','cs526').repeat(out('pre-req')).emit().until(outE().count().is(0)).values('name')

Explaination:
(1) has(): a filtering step; start from vertex 'cs526'
(2) repeat(): loop statement; if until() comes after repeat() it is a do/while looping
(3) emit(): used in conjunction with repeat(Traversal) to determine what objects get emit from the loop

Q4: Write a query that will output the max depth starting from a given node Eg. running it on CS101

Ans:
g.V().has('name','cs101').repeat(__.in('pre-req')).emit().path().count(local).max()

Explaination:
(1) repeat(__.in('pre-req')).emit(): traverse through the "pre-req" edges emitting all vertices as it goes
(2) count(local): calculates the path length
(3) max(): selects the longest one


